//example of some shaders compiled
flat basic.vs flat.fs
texture basic.vs texture.fs
light basic.vs light.fs
depth quad.vs depth.fs
multi basic.vs multi.fs
single basic.vs light_single_pass.fs

\basic.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;
in vec4 a_color;

uniform vec3 u_camera_pos;

uniform mat4 u_model;
uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;
out vec4 v_color;

uniform float u_time;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( v_position, 1.0) ).xyz;
	
	//store the color in the varying var to use it from the pixel shader
	v_color = a_color;

	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

\quad.vs

#version 330 core

in vec3 a_vertex;
in vec2 a_coord;
out vec2 v_uv;

void main()
{	
	v_uv = a_coord;
	gl_Position = vec4( a_vertex, 1.0 );
}


\flat.fs

#version 330 core

uniform vec4 u_color;

out vec4 FragColor;

void main()
{
	FragColor = u_color;
}


\texture.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;
}

\multi.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 N = normalize(v_normal);

	FragColor = color;
	NormalColor = vec4(N,1.0);
}


\depth.fs

#version 330 core

uniform vec2 u_camera_nearfar;
uniform sampler2D u_texture; //depth map
in vec2 v_uv;
out vec4 FragColor;

void main()
{
	float n = u_camera_nearfar.x;
	float f = u_camera_nearfar.y;
	float z = texture2D(u_texture,v_uv).x;
	if( n == 0.0 && f == 1.0 )
		FragColor = vec4(z);
	else
		FragColor = vec4( n * (z + 1.0) / (f + n - z * (f - n)) );
}


\instanced.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;

in mat4 u_model;

uniform vec3 u_camera_pos;

uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( a_vertex, 1.0) ).xyz;
	
	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

\light.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

uniform vec3 u_ambient_light;

uniform int u_light_type;
uniform vec3 u_light_color;
uniform vec3 u_light_position;
uniform float u_light_max_distance;
uniform vec3 u_light_direction;
uniform float u_light_cone_angle;
uniform float u_light_exp;

uniform int u_light_casts_shadows;
uniform sampler2D u_light_shadowmap;
uniform mat4 u_shadow_viewproj;
uniform float u_shadow_bias;

out vec4 FragColor;

float testShadowmap(vec3 pos)
{
    //project our 3D position to the shadowmap
    vec4 proj_pos = u_shadow_viewproj * vec4(pos,1.0);

    //from homogeneus space to clip space
    vec2 shadow_uv = proj_pos.xy / proj_pos.w;

    //from clip space to uv space
    shadow_uv = shadow_uv * 0.5 + vec2(0.5);

    //get point depth [-1 .. +1] in non-linear space
    float real_depth = (proj_pos.z - u_shadow_bias) / proj_pos.w;

    //normalize from [-1..+1] to [0..+1] still non-linear
    real_depth = real_depth * 0.5 + 0.5;

    //read depth from depth buffer in [0..+1] non-linear
    float shadow_depth = texture( u_light_shadowmap, shadow_uv).x;

    //compute final shadow factor by comparing
    float shadow_factor = 1.0;

    //we can compare them, even if they are not linear
    if( shadow_depth < real_depth )
        shadow_factor = 0.0;

    return shadow_factor;
}

void main()
{
	vec3 N = normalize(v_normal);
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

    vec3 total_light = vec3(u_ambient_light);

	vec3 L = u_light_position - v_world_position;
	float distance = length(L);
	L /= distance;

	float attenuation_factor = u_light_max_distance - distance;
	attenuation_factor /= u_light_max_distance;
	attenuation_factor = max(attenuation_factor, 0.0);

	float NdotL = clamp(dot(N,L), 0.0, 1.0);

    float spot_factor = 1.0;

    if(u_light_type == 1){
        float spot_cosine = dot(L, u_light_direction);
        if(spot_cosine >= u_light_cone_angle){
            spot_factor = pow(spot_cosine, u_light_exp);
        }
        else{
            spot_factor = 0.0;
        }
    }

    spot_factor = clamp(spot_factor, 0, 1);

    float shadow_factor = 1.0;

    if(u_light_casts_shadows == 1){
        shadow_factor = testShadowmap(v_world_position);
    }

	total_light += attenuation_factor * NdotL * u_light_color * spot_factor * shadow_factor;

	color.xyz *= total_light;


	FragColor = color;
}

\light_single_pass.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

const int max_lights = 5;

uniform vec3 u_ambient_light;

uniform int num_lights;

uniform int u_lights_type[max_lights];
uniform vec3 u_lights_color[max_lights];
uniform vec3 u_lights_position[max_lights];
uniform float u_lights_max_distance[max_lights];

uniform vec3 u_lights_direction[max_lights];
uniform float u_lights_cone_angle[max_lights];
uniform float u_lights_exp[max_lights];

uniform int u_light_casts_shadows;
uniform sampler2D u_light_shadowmap;
uniform mat4 u_shadow_viewproj;
uniform float u_shadow_bias;

out vec4 FragColor;

float testShadowmap(vec3 pos)
{
    //project our 3D position to the shadowmap
    vec4 proj_pos = u_shadow_viewproj * vec4(pos,1.0);

    //from homogeneus space to clip space
    vec2 shadow_uv = proj_pos.xy / proj_pos.w;

    //from clip space to uv space
    shadow_uv = shadow_uv * 0.5 + vec2(0.5);

    //get point depth [-1 .. +1] in non-linear space
    float real_depth = (proj_pos.z - u_shadow_bias) / proj_pos.w;

    //normalize from [-1..+1] to [0..+1] still non-linear
    real_depth = real_depth * 0.5 + 0.5;

    //read depth from depth buffer in [0..+1] non-linear
    float shadow_depth = texture( u_light_shadowmap, shadow_uv).x;

    //compute final shadow factor by comparing
    float shadow_factor = 1.0;

    //we can compare them, even if they are not linear
    if( shadow_depth < real_depth )
        shadow_factor = 0.0;

    return shadow_factor;
}

void main()
{
	vec3 N = normalize(v_normal);
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

    vec3 total_light = vec3(u_ambient_light);

   for(int i = 0; i<num_lights; i++){

           vec3 L = u_lights_position[i] - v_world_position;
           float distance = length(L);
           L /= distance;

           float attenuation_factor = u_lights_max_distance[i] - distance;
           attenuation_factor /= u_lights_max_distance[i];
           attenuation_factor = max(attenuation_factor, 0.0);

           float NdotL = clamp(dot(N,L), 0.0, 1.0);

           float spot_factor = 1.0;

           if(u_lights_type[i] == 1){
               float spot_cosine = dot(L, u_lights_direction[i]);
               if(spot_cosine >= u_lights_cone_angle[i])
               {
                   spot_factor = pow(spot_cosine, u_lights_exp[i]);
               }
               else{
                   spot_factor = 0.0;
               }
           }

           spot_factor = clamp(spot_factor, 0.0, 1.0);

           total_light += attenuation_factor * NdotL * u_lights_color[i] * spot_factor;
       }




	color.xyz *= total_light;


	FragColor = color;
}